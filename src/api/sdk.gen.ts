// This file is auto-generated by @hey-api/openapi-ts

import { type Client, formDataBodySerializer, type Options as Options2, type TDataShape } from './client';
import { client } from './client.gen';
import type { CreateUserData, CreateUserErrors, CreateUserResponses, GetAllTimeLogsData, GetAllTimeLogsResponses, GetAllUsersData, GetAllUsersLatestConfigFormsZipData, GetAllUsersLatestConfigFormsZipResponses, GetAllUsersLatestConfigResultsZipData, GetAllUsersLatestConfigResultsZipResponses, GetAllUsersLatestConfigTestsZipData, GetAllUsersLatestConfigTestsZipResponses, GetAllUsersResponses, GetAllUserSummariesData, GetAllUserSummariesResponses, GetGroupFormResultsZipData, GetGroupFormResultsZipResponses, GetGroupFullResultsZipData, GetGroupFullResultsZipResponses, GetGroupTestResultsZipData, GetGroupTestResultsZipResponses, GetLastestConfigData, GetLastestConfigResponses, GetUserAllResultsData, GetUserAllResultsResponses, GetUserData, GetUserFormResultsData, GetUserFormResultsResponses, GetUserResponses, GetUserSummaryByIdData, GetUserSummaryByIdResponses, GetUserTestResultsData, GetUserTestResultsResponses, GetUserTimelogsData, GetUserTimelogsResponses, LoginData, LoginResponses, RegisterData, RegisterResponses, SubmitFormAnswersData, SubmitFormAnswersResponses, UpdateConfigData, UpdateConfigResponses, UploadImageData, UploadImageResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Create new user
 *
 * Creates a new user and returns success message
 */
export const createUser = <ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateUserResponses, CreateUserErrors, ThrowOnError>({
        url: '/api/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const uploadImage = <ThrowOnError extends boolean = false>(options: Options<UploadImageData, ThrowOnError>) => {
    return (options.client ?? client).post<UploadImageResponses, unknown, ThrowOnError>({
        url: '/api/images',
        ...options
    });
};

export const submitFormAnswers = <ThrowOnError extends boolean = false>(options: Options<SubmitFormAnswersData, ThrowOnError>) => {
    return (options.client ?? client).post<SubmitFormAnswersResponses, unknown, ThrowOnError>({
        url: '/api/forms/answer',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const register = <ThrowOnError extends boolean = false>(options: Options<RegisterData, ThrowOnError>) => {
    return (options.client ?? client).post<RegisterResponses, unknown, ThrowOnError>({
        url: '/api/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => {
    return (options.client ?? client).post<LoginResponses, unknown, ThrowOnError>({
        url: '/api/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const updateConfig = <ThrowOnError extends boolean = false>(options?: Options<UpdateConfigData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateConfigResponses, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/api/config',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

export const getUser = <ThrowOnError extends boolean = false>(options: Options<GetUserData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUserResponses, unknown, ThrowOnError>({
        url: '/api/users/{username}',
        ...options
    });
};

export const getAllUsers = <ThrowOnError extends boolean = false>(options?: Options<GetAllUsersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllUsersResponses, unknown, ThrowOnError>({
        url: '/api/users/all',
        ...options
    });
};

export const getAllTimeLogs = <ThrowOnError extends boolean = false>(options?: Options<GetAllTimeLogsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllTimeLogsResponses, unknown, ThrowOnError>({
        url: '/api/timelogs',
        ...options
    });
};

export const getUserTimelogs = <ThrowOnError extends boolean = false>(options: Options<GetUserTimelogsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUserTimelogsResponses, unknown, ThrowOnError>({
        url: '/api/timelogs/{userId}',
        ...options
    });
};

export const getAllUserSummaries = <ThrowOnError extends boolean = false>(options?: Options<GetAllUserSummariesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllUserSummariesResponses, unknown, ThrowOnError>({
        url: '/api/summary',
        ...options
    });
};

export const getUserSummaryById = <ThrowOnError extends boolean = false>(options: Options<GetUserSummaryByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUserSummaryByIdResponses, unknown, ThrowOnError>({
        url: '/api/summary/{userId}',
        ...options
    });
};

export const getUserTestResults = <ThrowOnError extends boolean = false>(options: Options<GetUserTestResultsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUserTestResultsResponses, unknown, ThrowOnError>({
        url: '/api/results/user/{userId}/tests',
        ...options
    });
};

export const getUserFormResults = <ThrowOnError extends boolean = false>(options: Options<GetUserFormResultsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUserFormResultsResponses, unknown, ThrowOnError>({
        url: '/api/results/user/{userId}/forms',
        ...options
    });
};

export const getUserAllResults = <ThrowOnError extends boolean = false>(options: Options<GetUserAllResultsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUserAllResultsResponses, unknown, ThrowOnError>({
        url: '/api/results/user/{userId}/all',
        ...options
    });
};

export const getAllUsersLatestConfigResultsZip = <ThrowOnError extends boolean = false>(options?: Options<GetAllUsersLatestConfigResultsZipData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllUsersLatestConfigResultsZipResponses, unknown, ThrowOnError>({
        url: '/api/results/user/all/latest/zip',
        ...options
    });
};

export const getAllUsersLatestConfigTestsZip = <ThrowOnError extends boolean = false>(options?: Options<GetAllUsersLatestConfigTestsZipData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllUsersLatestConfigTestsZipResponses, unknown, ThrowOnError>({
        url: '/api/results/user/all/latest/tests/zip',
        ...options
    });
};

export const getAllUsersLatestConfigFormsZip = <ThrowOnError extends boolean = false>(options?: Options<GetAllUsersLatestConfigFormsZipData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllUsersLatestConfigFormsZipResponses, unknown, ThrowOnError>({
        url: '/api/results/user/all/latest/forms/zip',
        ...options
    });
};

export const getGroupTestResultsZip = <ThrowOnError extends boolean = false>(options: Options<GetGroupTestResultsZipData, ThrowOnError>) => {
    return (options.client ?? client).get<GetGroupTestResultsZipResponses, unknown, ThrowOnError>({
        url: '/api/results/group/{groupId}/tests',
        ...options
    });
};

export const getGroupFormResultsZip = <ThrowOnError extends boolean = false>(options: Options<GetGroupFormResultsZipData, ThrowOnError>) => {
    return (options.client ?? client).get<GetGroupFormResultsZipResponses, unknown, ThrowOnError>({
        url: '/api/results/group/{groupId}/forms',
        ...options
    });
};

export const getGroupFullResultsZip = <ThrowOnError extends boolean = false>(options: Options<GetGroupFullResultsZipData, ThrowOnError>) => {
    return (options.client ?? client).get<GetGroupFullResultsZipResponses, unknown, ThrowOnError>({
        url: '/api/results/group/{groupId}/all',
        ...options
    });
};

export const getLastestConfig = <ThrowOnError extends boolean = false>(options?: Options<GetLastestConfigData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetLastestConfigResponses, unknown, ThrowOnError>({
        url: '/api/config/latest',
        ...options
    });
};
