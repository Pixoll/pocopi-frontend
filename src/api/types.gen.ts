// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: 'http://localhost:8080' | (string & {});
};

export type FieldErrorResponse = {
    field?: string;
    message?: string;
};

export type MultiFieldException = {
    cause?: {
        stackTrace?: Array<{
            classLoaderName?: string;
            moduleName?: string;
            moduleVersion?: string;
            methodName?: string;
            fileName?: string;
            lineNumber?: number;
            className?: string;
            nativeMethod?: boolean;
        }>;
        message?: string;
        localizedMessage?: string;
    };
    stackTrace?: Array<{
        classLoaderName?: string;
        moduleName?: string;
        moduleVersion?: string;
        methodName?: string;
        fileName?: string;
        lineNumber?: number;
        className?: string;
        nativeMethod?: boolean;
    }>;
    errors?: Array<FieldErrorResponse>;
    message?: string;
    suppressed?: Array<{
        stackTrace?: Array<{
            classLoaderName?: string;
            moduleName?: string;
            moduleVersion?: string;
            methodName?: string;
            fileName?: string;
            lineNumber?: number;
            className?: string;
            nativeMethod?: boolean;
        }>;
        message?: string;
        localizedMessage?: string;
    }>;
    localizedMessage?: string;
};

export type CreateUserRequest = {
    /**
     * Username by user like rut or other identifier
     */
    username: string;
    groupId: number;
    anonymous: boolean;
    name: string;
    email: string;
    age: number;
    password?: string;
};

export type UploadImageResponse = {
    url?: string;
};

export type FormAnswerRequest = {
    username: string;
    formId: number;
    answers: Array<QuestionAnswer>;
};

export type QuestionAnswer = {
    questionId: number;
    optionId: number;
    value: number;
    answer: string;
};

export type PatchFaq = {
    id?: number;
    question: string;
    answer: string;
};

export type PatchForm = {
    id?: number;
    /**
     * Form questions
     */
    questions: Array<PatchSelectMultiple | PatchSelectOne | PatchSlider | PatchTextLong | PatchTextShort>;
};

export type PatchFormOption = {
    id?: number;
    text?: string;
};

export type PatchFormQuestion = unknown;

export type PatchGroup = {
    id?: number;
    probability?: number;
    label?: string;
    greeting?: string;
    protocol?: PatchProtocol;
};

export type PatchInformationCard = {
    id?: number;
    title: string;
    description: string;
    color: number;
};

export type PatchLastConfig = {
    version: number;
    title: string;
    subtitle: string;
    description: string;
    anonymous: boolean;
    informedConsent: string;
    informationCards: Array<PatchInformationCard>;
    faq: Array<PatchFaq>;
    preTestForm: PatchForm;
    postTestForm: PatchForm;
    groups: {
        [key: string]: PatchGroup;
    };
    translations: {
        [key: string]: string;
    };
};

export type PatchOption = {
    id?: number;
    text?: string;
    correct: boolean;
};

export type PatchPhase = {
    id?: number;
    questions: Array<PatchQuestion>;
};

export type PatchProtocol = {
    id?: number;
    label: string;
    allowPreviousPhase: boolean;
    allowPreviousQuestion: boolean;
    allowSkipQuestion: boolean;
    phases: Array<PatchPhase>;
};

export type PatchQuestion = {
    id?: number;
    text?: string;
    options: Array<PatchOption>;
};

export type PatchRequest = {
    /**
     * Icon by config
     */
    appIcon?: Blob | File;
    /**
     * All images from question and options by pre test form
     */
    preTestFormQuestionOptionsFiles: {
        [key: number]: Blob | File;
    };
    /**
     * All images from question and options by post test form
     */
    postTestFormQuestionOptionsFiles: {
        [key: number]: Blob | File;
    };
    /**
     * All images from question and options each phase and protocol
     */
    groupQuestionOptionsFiles: {
        [key: number]: Blob | File;
    };
    /**
     * All images from information cards
     */
    informationCardFiles: {
        [key: number]: Blob | File;
    };
    /**
     * Last configuration updated
     */
    updateLastConfig: PatchLastConfig;
};

export type PatchSelectMultiple = PatchFormQuestion & {
    id?: number;
    category: string;
    text?: string;
    type: 'select-one' | 'select-multiple' | 'slider' | 'text-short' | 'text-long';
    options: Array<PatchFormOption>;
    min: number;
    max: number;
    other: boolean;
};

export type PatchSelectOne = PatchFormQuestion & {
    id?: number;
    category: string;
    text?: string;
    type: 'select-one' | 'select-multiple' | 'slider' | 'text-short' | 'text-long';
    options: Array<PatchFormOption>;
    other: boolean;
};

export type PatchSlider = PatchFormQuestion & {
    id?: number;
    category: string;
    text?: string;
    type: 'select-one' | 'select-multiple' | 'slider' | 'text-short' | 'text-long';
    placeholder: string;
    min: number;
    max: number;
    step: number;
    labels: Array<SliderLabel>;
};

export type PatchTextLong = PatchFormQuestion & {
    id?: number;
    category: string;
    text?: string;
    type: 'select-one' | 'select-multiple' | 'slider' | 'text-short' | 'text-long';
    placeholder: string;
    minLength: number;
    maxLength: number;
};

export type PatchTextShort = PatchFormQuestion & {
    id?: number;
    category: string;
    text?: string;
    type: 'select-one' | 'select-multiple' | 'slider' | 'text-short' | 'text-long';
    placeholder: string;
    minLength: number;
    maxLength: number;
};

export type SliderLabel = {
    number: number;
    label: string;
};

export type PatchResponse = {
    configUpdatesSummary: {
        [key: string]: string;
    };
    informationCardUpdatesSummary: {
        [key: string]: string;
    };
    faqUpdatedSummary: {
        [key: string]: string;
    };
    preTestUpdatedSummary: {
        [key: string]: string;
    };
    postTestUpdatedSummary: {
        [key: string]: string;
    };
    groupSummary: {
        [key: string]: string;
    };
};

export type User = {
    id: number;
    username: string;
    name: string;
    anonymous: boolean;
    email: string;
    age: number;
};

export type Event = {
    type: string;
    optionId: number;
    timestamp: number;
};

export type TimeLog = {
    userId: number;
    phaseId: number;
    questionId: number;
    startTimestamp: number;
    endTimestamp: number;
    skipped: boolean;
    correct: boolean;
    totalOptionChanges: number;
    totalOptionHovers: number;
    events: Array<Event>;
};

export type TotalUserSummary = {
    averageAccuracy: number;
    averageTimeTaken: number;
    totalQuestionsAnswered: number;
    users: Array<UserSummary>;
};

export type UserSummary = {
    id: number;
    name: string;
    email: string;
    age: number;
    group: string;
    timestamp: number;
    timeTaken: number;
    correctQuestions: number;
    questionsAnswered: number;
    accuracy: number;
};

/**
 * Resultado de una pregunta de test
 */
export type TestQuestionResult = {
    /**
     * ID de la pregunta
     */
    questionId?: number;
    /**
     * ID de la fase
     */
    phaseId?: number;
    /**
     * Timestamp de inicio
     */
    startTimestamp?: number;
    /**
     * Timestamp de fin
     */
    endTimestamp?: number;
    /**
     * ¿Fue respondida correctamente?
     */
    correct?: boolean;
    /**
     * ¿La pregunta fue saltada?
     */
    skipped?: boolean;
    /**
     * Cantidad de cambios de opción
     */
    totalOptionChanges?: number;
    /**
     * Cantidad de hovers
     */
    totalOptionHovers?: number;
};

/**
 * Resultados de test de un usuario
 */
export type UserTestResultsResponse = {
    /**
     * ID del usuario
     */
    userId?: number;
    /**
     * Resultados por pregunta
     */
    questions?: Array<TestQuestionResult>;
};

/**
 * Contiene las respuestas a un formulario especifico.
 */
export type FormAnswers = {
    /**
     * ID del formulario
     */
    formId: number;
    /**
     * Título del formulario
     */
    formTitle: string;
    /**
     * Respuestas a preguntas del formulario
     */
    answers: Array<QuestionAnswer>;
};

/**
 * Respuestas de los resultados de los formularios(pre-test y post-test)
 */
export type UserFormResultsResponse = {
    /**
     * ID del usuario
     */
    userId: number;
    /**
     * Resultados de formularios pre-test
     */
    pre: Array<FormAnswers>;
    /**
     * Resultados de formularios post-test
     */
    post: Array<FormAnswers>;
};

export type Faq = {
    id: number;
    question: string;
    answer: string;
};

export type Form = {
    id: number;
    /**
     * Form questions
     */
    questions: Array<SelectMultiple | SelectOne | Slider | TextLong | TextShort>;
};

export type FormOption = {
    id: number;
    text?: string;
    image?: Image;
};

export type FormQuestion = unknown;

export type Group = {
    id: number;
    /**
     * Probability between 0 and 100
     */
    probability: number;
    label: string;
    greeting: string;
    protocol: Protocol;
};

export type Image = {
    url: string;
    alt: string;
};

export type InformationCard = {
    id: number;
    title: string;
    description: string;
    color: number;
    icon?: Image;
};

export type Option = {
    id: number;
    text?: string;
    image?: Image;
    correct: boolean;
};

export type Phase = {
    id: number;
    questions: Array<Question>;
};

export type Protocol = {
    id: number;
    label: string;
    allowPreviousPhase: boolean;
    allowPreviousQuestion: boolean;
    allowSkipQuestion: boolean;
    phases: Array<Phase>;
};

export type Question = {
    id: number;
    text?: string;
    image: Image;
    options: Array<Option>;
};

export type SelectMultiple = FormQuestion & {
    id: number;
    category: string;
    text?: string;
    image?: Image;
    type: 'select-one' | 'select-multiple' | 'slider' | 'text-short' | 'text-long';
    options: Array<FormOption>;
    min: number;
    max: number;
    other: boolean;
};

export type SelectOne = FormQuestion & {
    id: number;
    category: string;
    text?: string;
    image?: Image;
    type: 'select-one' | 'select-multiple' | 'slider' | 'text-short' | 'text-long';
    options: Array<FormOption>;
    other: boolean;
};

export type SingleConfigResponse = {
    /**
     * Configuration version
     */
    id: number;
    /**
     * Configuration icon image
     */
    icon?: Image;
    /**
     * Configuration title
     */
    title: string;
    /**
     * Configuration subtitle
     */
    subtitle: string;
    /**
     * Configuration description
     */
    description: string;
    /**
     * Is or not anonymous
     */
    anonymous: boolean;
    /**
     * Card information by configuration
     */
    informationCards: Array<InformationCard>;
    informedConsent: string;
    faq: Array<Faq>;
    preTestForm: Form;
    postTestForm: Form;
    groups: {
        [key: string]: Group;
    };
    translations: {
        [key: string]: string;
    };
};

export type Slider = FormQuestion & {
    id: number;
    category: string;
    text?: string;
    image?: Image;
    type: 'select-one' | 'select-multiple' | 'slider' | 'text-short' | 'text-long';
    placeholder: string;
    min: number;
    max: number;
    step: number;
    labels: Array<SliderLabel>;
};

export type TextLong = FormQuestion & {
    id: number;
    category: string;
    text?: string;
    image?: Image;
    type: 'select-one' | 'select-multiple' | 'slider' | 'text-short' | 'text-long';
    placeholder: string;
    minLength: number;
    maxLength: number;
};

export type TextShort = FormQuestion & {
    id: number;
    category: string;
    text?: string;
    image?: Image;
    type: 'select-one' | 'select-multiple' | 'slider' | 'text-short' | 'text-long';
    placeholder: string;
    minLength: number;
    maxLength: number;
};

export type CreateUserData = {
    body: CreateUserRequest;
    path?: never;
    query?: never;
    url: '/api/users';
};

export type CreateUserErrors = {
    /**
     * Validation error
     */
    400: MultiFieldException;
};

export type CreateUserError = CreateUserErrors[keyof CreateUserErrors];

export type CreateUserResponses = {
    /**
     * User created successfully
     */
    200: string;
};

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses];

export type UploadImageData = {
    body?: never;
    path?: never;
    query: {
        file: Blob | File;
        path: string;
    };
    url: '/api/images';
};

export type UploadImageResponses = {
    /**
     * OK
     */
    200: UploadImageResponse;
};

export type UploadImageResponse2 = UploadImageResponses[keyof UploadImageResponses];

export type SubmitFormAnswersData = {
    body: FormAnswerRequest;
    path?: never;
    query?: never;
    url: '/api/forms/answer';
};

export type SubmitFormAnswersResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type SubmitFormAnswersResponse = SubmitFormAnswersResponses[keyof SubmitFormAnswersResponses];

export type UpdateConfigData = {
    body: PatchRequest;
    path?: never;
    query?: never;
    url: '/api/config';
};

export type UpdateConfigResponses = {
    /**
     * OK
     */
    200: PatchResponse;
};

export type UpdateConfigResponse = UpdateConfigResponses[keyof UpdateConfigResponses];

export type GetUserData = {
    body?: never;
    path: {
        username: string;
    };
    query?: never;
    url: '/api/users/{username}';
};

export type GetUserResponses = {
    /**
     * OK
     */
    200: User;
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type GetAllUsersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/users/all';
};

export type GetAllUsersResponses = {
    /**
     * OK
     */
    200: Array<User>;
};

export type GetAllUsersResponse = GetAllUsersResponses[keyof GetAllUsersResponses];

export type GetAllTimeLogsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/timelogs';
};

export type GetAllTimeLogsResponses = {
    /**
     * OK
     */
    200: Array<TimeLog>;
};

export type GetAllTimeLogsResponse = GetAllTimeLogsResponses[keyof GetAllTimeLogsResponses];

export type GetUserTimelogsData = {
    body?: never;
    path: {
        userId: number;
    };
    query?: never;
    url: '/api/timelogs/{userId}';
};

export type GetUserTimelogsResponses = {
    /**
     * OK
     */
    200: TimeLog;
};

export type GetUserTimelogsResponse = GetUserTimelogsResponses[keyof GetUserTimelogsResponses];

export type GetAllUserSummariesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/summary';
};

export type GetAllUserSummariesResponses = {
    /**
     * OK
     */
    200: TotalUserSummary;
};

export type GetAllUserSummariesResponse = GetAllUserSummariesResponses[keyof GetAllUserSummariesResponses];

export type GetUserSummaryByIdData = {
    body?: never;
    path: {
        userId: number;
    };
    query?: never;
    url: '/api/summary/{userId}';
};

export type GetUserSummaryByIdResponses = {
    /**
     * OK
     */
    200: UserSummary;
};

export type GetUserSummaryByIdResponse = GetUserSummaryByIdResponses[keyof GetUserSummaryByIdResponses];

export type GetUserTestResultsData = {
    body?: never;
    path: {
        userId: number;
    };
    query?: never;
    url: '/api/results/test/user/{userId}';
};

export type GetUserTestResultsResponses = {
    /**
     * OK
     */
    200: UserTestResultsResponse;
};

export type GetUserTestResultsResponse = GetUserTestResultsResponses[keyof GetUserTestResultsResponses];

export type GetGroupTestResultsZipData = {
    body?: never;
    path: {
        groupId: number;
    };
    query?: never;
    url: '/api/results/test/group/{groupId}/zip';
};

export type GetGroupTestResultsZipResponses = {
    /**
     * OK
     */
    200: string;
};

export type GetGroupTestResultsZipResponse = GetGroupTestResultsZipResponses[keyof GetGroupTestResultsZipResponses];

export type GetUserFormResultsData = {
    body?: never;
    path: {
        userId: number;
    };
    query?: never;
    url: '/api/form-results/user/{userId}';
};

export type GetUserFormResultsResponses = {
    /**
     * OK
     */
    200: UserFormResultsResponse;
};

export type GetUserFormResultsResponse = GetUserFormResultsResponses[keyof GetUserFormResultsResponses];

export type GetGroupFormResultsAsZipData = {
    body?: never;
    path: {
        groupId: number;
    };
    query?: never;
    url: '/api/form-results/group/{groupId}';
};

export type GetGroupFormResultsAsZipResponses = {
    /**
     * OK
     */
    200: string;
};

export type GetGroupFormResultsAsZipResponse = GetGroupFormResultsAsZipResponses[keyof GetGroupFormResultsAsZipResponses];

export type GetLastestConfigData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/config/latest';
};

export type GetLastestConfigResponses = {
    /**
     * OK
     */
    200: SingleConfigResponse;
};

export type GetLastestConfigResponse = GetLastestConfigResponses[keyof GetLastestConfigResponses];
