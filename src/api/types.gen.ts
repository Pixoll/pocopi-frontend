// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: 'http://localhost:8080' | (string & {});
};

export type ApiHttpError = {
    code: number;
    message: string;
    errors: Array<FieldError>;
};

export type FieldError = {
    field: string;
    message: string;
};

export type NewUser = {
    username: string;
    anonymous: boolean;
    name: string;
    email: string;
    age: string;
    password: string;
};

export type ImageUrl = {
    url?: string;
};

export type NewFormAnswer = {
    questionId: number;
    optionId: number;
    value: number;
    answer: string;
};

export type NewFormAnswers = {
    username: string;
    formId: number;
    answers: Array<NewFormAnswer>;
};

export type Token = {
    token: string;
};

export type Credentials = {
    username: string;
    password: string;
};

export type ConfigUpdate = {
    version: number;
    title: string;
    subtitle: string;
    description: string;
    anonymous: boolean;
    informedConsent: string;
    informationCards: Array<InformationCardUpdate>;
    faq: Array<FrequentlyAskedQuestionUpdate>;
    preTestForm: FormUpdate;
    postTestForm: FormUpdate;
    groups: {
        [key: string]: TestGroupUpdate;
    };
    translations: {
        [key: string]: string;
    };
};

export type ConfigUpdateWithFiles = {
    /**
     * Icon by config
     */
    appIcon?: Blob | File;
    /**
     * All images from question and options by pre test form
     */
    preTestFormQuestionOptionsFiles: {
        [key: string]: Blob | File;
    };
    /**
     * All images from question and options by post test form
     */
    postTestFormQuestionOptionsFiles: {
        [key: string]: Blob | File;
    };
    /**
     * All images from question and options each phase and protocol
     */
    groupQuestionOptionsFiles: {
        [key: string]: Blob | File;
    };
    /**
     * All images from information cards
     */
    informationCardFiles: {
        [key: string]: Blob | File;
    };
    /**
     * Last configuration updated
     */
    updateLastConfig: ConfigUpdate;
};

export type FormOptionUpdate = {
    id?: number;
    text?: string;
};

export type FormQuestionUpdate = unknown;

export type FormUpdate = {
    id?: number;
    /**
     * Form questions
     */
    questions: Array<SelectMultipleUpdate | SelectOneUpdate | SliderUpdate | TextLongUpdate | TextShortUpdate>;
};

export type FrequentlyAskedQuestionUpdate = {
    id?: number;
    question: string;
    answer: string;
};

export type InformationCardUpdate = {
    id?: number;
    title: string;
    description: string;
    color: number;
};

export type SelectMultipleUpdate = FormQuestionUpdate & {
    id?: number;
    category: string;
    text?: string;
    type: 'select-one' | 'select-multiple' | 'slider' | 'text-short' | 'text-long';
    options: Array<FormOptionUpdate>;
    min: number;
    max: number;
    other: boolean;
};

export type SelectOneUpdate = FormQuestionUpdate & {
    id?: number;
    category: string;
    text?: string;
    type: 'select-one' | 'select-multiple' | 'slider' | 'text-short' | 'text-long';
    options: Array<FormOptionUpdate>;
    other: boolean;
};

export type SliderLabel = {
    number: number;
    label: string;
};

export type SliderUpdate = FormQuestionUpdate & {
    id?: number;
    category: string;
    text?: string;
    type: 'select-one' | 'select-multiple' | 'slider' | 'text-short' | 'text-long';
    placeholder: string;
    min: number;
    max: number;
    step: number;
    labels: Array<SliderLabel>;
};

export type TestGroupUpdate = {
    id?: number;
    probability?: number;
    label?: string;
    greeting?: string;
    protocol?: TestProtocolUpdate;
};

export type TestOptionUpdate = {
    id?: number;
    text?: string;
    correct: boolean;
};

export type TestPhaseUpdate = {
    id?: number;
    questions: Array<TestQuestionUpdate>;
};

export type TestProtocolUpdate = {
    id?: number;
    label: string;
    allowPreviousPhase: boolean;
    allowPreviousQuestion: boolean;
    allowSkipQuestion: boolean;
    phases: Array<TestPhaseUpdate>;
};

export type TestQuestionUpdate = {
    id?: number;
    text?: string;
    options: Array<TestOptionUpdate>;
};

export type TextLongUpdate = FormQuestionUpdate & {
    id?: number;
    category: string;
    text?: string;
    type: 'select-one' | 'select-multiple' | 'slider' | 'text-short' | 'text-long';
    placeholder: string;
    minLength: number;
    maxLength: number;
};

export type TextShortUpdate = FormQuestionUpdate & {
    id?: number;
    category: string;
    text?: string;
    type: 'select-one' | 'select-multiple' | 'slider' | 'text-short' | 'text-long';
    placeholder: string;
    minLength: number;
    maxLength: number;
};

export type UpdatedConfig = {
    configUpdatesSummary: {
        [key: string]: string;
    };
    informationCardUpdatesSummary: {
        [key: string]: string;
    };
    faqUpdatedSummary: {
        [key: string]: string;
    };
    preTestUpdatedSummary: {
        [key: string]: string;
    };
    postTestUpdatedSummary: {
        [key: string]: string;
    };
    groupSummary: {
        [key: string]: string;
    };
};

export type User = {
    id: number;
    username: string;
    name: string;
    anonymous: boolean;
    email: string;
    age: number;
};

export type TimeLog = {
    userId: number;
    phaseId: number;
    questionId: number;
    startTimestamp: number;
    endTimestamp: number;
    skipped: boolean;
    correct: boolean;
    totalOptionChanges: number;
    totalOptionHovers: number;
    events: Array<TimeLogEvent>;
};

export type TimeLogEvent = {
    type: string;
    optionId: number;
    timestamp: number;
};

export type UserSummary = {
    id: number;
    name: string;
    email: string;
    age: number;
    timestamp: number;
    timeTaken: number;
    correctQuestions: number;
    questionsAnswered: number;
    accuracy: number;
};

export type UsersSummary = {
    averageAccuracy: number;
    averageTimeTaken: number;
    totalQuestionsAnswered: number;
    users: Array<UserSummary>;
};

/**
 * Resultado de una pregunta de test
 */
export type TestQuestionResult = {
    /**
     * ID de la pregunta
     */
    questionId?: number;
    /**
     * ID de la fase
     */
    phaseId?: number;
    /**
     * Timestamp de inicio
     */
    startTimestamp?: number;
    /**
     * Timestamp de fin
     */
    endTimestamp?: number;
    /**
     * ¿Fue respondida correctamente?
     */
    correct?: boolean;
    /**
     * ¿La pregunta fue saltada?
     */
    skipped?: boolean;
    /**
     * Cantidad de cambios de opción
     */
    totalOptionChanges?: number;
    /**
     * Cantidad de hovers
     */
    totalOptionHovers?: number;
};

/**
 * Resultados de test de un usuario
 */
export type TestResultByUser = {
    /**
     * Información del usuario, incluyendo el ID de grupo de test
     */
    user?: UserBasicInfo;
    /**
     * Resultados por pregunta
     */
    questions?: Array<TestQuestionResult>;
};

/**
 * Datos básicos de un usuario
 */
export type UserBasicInfo = {
    /**
     * ID del usuario
     */
    id?: number;
    /**
     * Nombre del usuario
     */
    name?: string;
    /**
     * Email del usuario
     */
    email?: string;
    /**
     * Edad del usuario
     */
    age?: number;
};

/**
 * Respuesta de un usuario a una pregunta del formulario.
 */
export type FormAnswer = {
    /**
     * ID de la pregunta
     */
    questionId: number;
    /**
     * Texto de la pregunta
     */
    questionText: string;
    /**
     * ID de la opcion seleccionada (si es pertinente))
     */
    optionId?: number;
    /**
     * Texto de la opcion seleccionada (si es pertinente)
     */
    optionText?: string;
    /**
     * Valor numerico de la respuesta (si es pertinente)
     */
    value?: number;
    /**
     * Respuesta en texto libre (si es pertinente)
     */
    answer?: string;
};

/**
 * Contiene las respuestas a un formulario especifico.
 */
export type FormAnswers = {
    /**
     * ID del formulario
     */
    formId: number;
    /**
     * Título del formulario
     */
    formTitle: string;
    /**
     * Respuestas a preguntas del formulario
     */
    answers: Array<FormAnswer>;
};

/**
 * Respuestas de los resultados de los formularios (pre-test y post-test) de un usuario
 */
export type FormAnswersByUser = {
    /**
     * Información del usuario, incluyendo el ID de grupo de test
     */
    user?: UserBasicInfo;
    /**
     * Resultados de formularios pre-test
     */
    pre?: Array<FormAnswers>;
    /**
     * Resultados de formularios post-test
     */
    post?: Array<FormAnswers>;
};

/**
 * Resultados completos (formularios y tests) de un usuario, con info de usuario unica
 */
export type ResultsByUser = {
    /**
     * Datos del usuario
     */
    user?: UserBasicInfo;
    /**
     * Resultados de formularios
     */
    forms?: UserFormsResult;
    /**
     * Resultados de test
     */
    tests?: UserTestsResult;
};

export type UserFormsResult = {
    pre?: Array<FormAnswers>;
    post?: Array<FormAnswers>;
};

export type UserTestsResult = {
    questions?: Array<TestQuestionResult>;
};

export type Config = {
    /**
     * Configuration version
     */
    id: number;
    /**
     * Configuration icon image
     */
    icon?: Image;
    /**
     * Configuration title
     */
    title: string;
    /**
     * Configuration subtitle
     */
    subtitle: string;
    /**
     * Configuration description
     */
    description: string;
    /**
     * Is or not anonymous
     */
    anonymous: boolean;
    /**
     * Card information by configuration
     */
    informationCards: Array<InformationCard>;
    informedConsent: string;
    frequentlyAskedQuestion: Array<FrequentlyAskedQuestion>;
    preTestForm: Form;
    postTestForm: Form;
    groups: {
        [key: string]: TestGroup;
    };
    translations: {
        [key: string]: string;
    };
};

export type Form = {
    id: number;
    /**
     * Form questions
     */
    questions: Array<SelectMultiple | SelectOne | Slider | TextLong | TextShort>;
};

export type FormOption = {
    id: number;
    text?: string;
    image?: Image;
};

export type FormQuestion = unknown;

export type FrequentlyAskedQuestion = {
    id: number;
    question: string;
    answer: string;
};

export type Image = {
    url: string;
    alt: string;
};

export type InformationCard = {
    id: number;
    title: string;
    description: string;
    color: number;
    icon?: Image;
};

export type SelectMultiple = FormQuestion & {
    id: number;
    category: string;
    text?: string;
    image?: Image;
    type: 'select-one' | 'select-multiple' | 'slider' | 'text-short' | 'text-long';
    options: Array<FormOption>;
    min: number;
    max: number;
    other: boolean;
};

export type SelectOne = FormQuestion & {
    id: number;
    category: string;
    text?: string;
    image?: Image;
    type: 'select-one' | 'select-multiple' | 'slider' | 'text-short' | 'text-long';
    options: Array<FormOption>;
    other: boolean;
};

export type Slider = FormQuestion & {
    id: number;
    category: string;
    text?: string;
    image?: Image;
    type: 'select-one' | 'select-multiple' | 'slider' | 'text-short' | 'text-long';
    placeholder: string;
    min: number;
    max: number;
    step: number;
    labels: Array<SliderLabel>;
};

export type TestGroup = {
    id: number;
    /**
     * Probability between 0 and 100
     */
    probability: number;
    label: string;
    greeting: string;
    protocol: TestProtocol;
};

export type TestOption = {
    id: number;
    text?: string;
    image?: Image;
    correct: boolean;
};

export type TestPhase = {
    id: number;
    questions: Array<TestQuestion>;
};

export type TestProtocol = {
    id: number;
    label: string;
    allowPreviousPhase: boolean;
    allowPreviousQuestion: boolean;
    allowSkipQuestion: boolean;
    phases: Array<TestPhase>;
};

export type TestQuestion = {
    id: number;
    text?: string;
    image: Image;
    options: Array<TestOption>;
};

export type TextLong = FormQuestion & {
    id: number;
    category: string;
    text?: string;
    image?: Image;
    type: 'select-one' | 'select-multiple' | 'slider' | 'text-short' | 'text-long';
    placeholder: string;
    minLength: number;
    maxLength: number;
};

export type TextShort = FormQuestion & {
    id: number;
    category: string;
    text?: string;
    image?: Image;
    type: 'select-one' | 'select-multiple' | 'slider' | 'text-short' | 'text-long';
    placeholder: string;
    minLength: number;
    maxLength: number;
};

export type CreateUserData = {
    body: NewUser;
    path?: never;
    query?: never;
    url: '/api/users';
};

export type CreateUserErrors = {
    /**
     * Validation error
     */
    400: ApiHttpError;
};

export type CreateUserError = CreateUserErrors[keyof CreateUserErrors];

export type CreateUserResponses = {
    /**
     * User created successfully
     */
    200: unknown;
};

export type UploadImageData = {
    body?: never;
    path?: never;
    query: {
        file: Blob | File;
        path: string;
    };
    url: '/api/images';
};

export type UploadImageResponses = {
    /**
     * OK
     */
    200: ImageUrl;
};

export type UploadImageResponse = UploadImageResponses[keyof UploadImageResponses];

export type SubmitFormAnswersData = {
    body: NewFormAnswers;
    path?: never;
    query?: never;
    url: '/api/forms/answer';
};

export type SubmitFormAnswersResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type SubmitFormAnswersResponse = SubmitFormAnswersResponses[keyof SubmitFormAnswersResponses];

export type RegisterData = {
    body: NewUser;
    path?: never;
    query?: never;
    url: '/api/auth/register';
};

export type RegisterResponses = {
    /**
     * OK
     */
    200: Token;
};

export type RegisterResponse = RegisterResponses[keyof RegisterResponses];

export type LoginData = {
    body: Credentials;
    path?: never;
    query?: never;
    url: '/api/auth/login';
};

export type LoginResponses = {
    /**
     * OK
     */
    200: Token;
};

export type LoginResponse = LoginResponses[keyof LoginResponses];

export type UpdateConfigData = {
    body?: ConfigUpdateWithFiles;
    path?: never;
    query?: never;
    url: '/api/config';
};

export type UpdateConfigResponses = {
    /**
     * OK
     */
    200: UpdatedConfig;
};

export type UpdateConfigResponse = UpdateConfigResponses[keyof UpdateConfigResponses];

export type GetUserData = {
    body?: never;
    path: {
        username: string;
    };
    query?: never;
    url: '/api/users/{username}';
};

export type GetUserResponses = {
    /**
     * OK
     */
    200: User;
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type GetAllUsersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/users/all';
};

export type GetAllUsersResponses = {
    /**
     * OK
     */
    200: Array<User>;
};

export type GetAllUsersResponse = GetAllUsersResponses[keyof GetAllUsersResponses];

export type GetAllTimeLogsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/timelogs';
};

export type GetAllTimeLogsResponses = {
    /**
     * OK
     */
    200: Array<TimeLog>;
};

export type GetAllTimeLogsResponse = GetAllTimeLogsResponses[keyof GetAllTimeLogsResponses];

export type GetUserTimelogsData = {
    body?: never;
    path: {
        userId: number;
    };
    query?: never;
    url: '/api/timelogs/{userId}';
};

export type GetUserTimelogsResponses = {
    /**
     * OK
     */
    200: TimeLog;
};

export type GetUserTimelogsResponse = GetUserTimelogsResponses[keyof GetUserTimelogsResponses];

export type GetAllUserSummariesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/summary';
};

export type GetAllUserSummariesResponses = {
    /**
     * OK
     */
    200: UsersSummary;
};

export type GetAllUserSummariesResponse = GetAllUserSummariesResponses[keyof GetAllUserSummariesResponses];

export type GetUserSummaryByIdData = {
    body?: never;
    path: {
        userId: number;
    };
    query?: never;
    url: '/api/summary/{userId}';
};

export type GetUserSummaryByIdResponses = {
    /**
     * OK
     */
    200: UserSummary;
};

export type GetUserSummaryByIdResponse = GetUserSummaryByIdResponses[keyof GetUserSummaryByIdResponses];

export type GetUserTestResultsData = {
    body?: never;
    path: {
        userId: number;
    };
    query?: never;
    url: '/api/results/user/{userId}/tests';
};

export type GetUserTestResultsResponses = {
    /**
     * OK
     */
    200: TestResultByUser;
};

export type GetUserTestResultsResponse = GetUserTestResultsResponses[keyof GetUserTestResultsResponses];

export type GetUserFormResultsData = {
    body?: never;
    path: {
        userId: number;
    };
    query?: never;
    url: '/api/results/user/{userId}/forms';
};

export type GetUserFormResultsResponses = {
    /**
     * OK
     */
    200: FormAnswersByUser;
};

export type GetUserFormResultsResponse = GetUserFormResultsResponses[keyof GetUserFormResultsResponses];

export type GetUserAllResultsData = {
    body?: never;
    path: {
        userId: number;
    };
    query?: never;
    url: '/api/results/user/{userId}/all';
};

export type GetUserAllResultsResponses = {
    /**
     * OK
     */
    200: ResultsByUser;
};

export type GetUserAllResultsResponse = GetUserAllResultsResponses[keyof GetUserAllResultsResponses];

export type GetAllUsersLatestConfigResultsZipData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/results/user/all/latest/zip';
};

export type GetAllUsersLatestConfigResultsZipResponses = {
    /**
     * OK
     */
    200: string;
};

export type GetAllUsersLatestConfigResultsZipResponse = GetAllUsersLatestConfigResultsZipResponses[keyof GetAllUsersLatestConfigResultsZipResponses];

export type GetAllUsersLatestConfigTestsZipData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/results/user/all/latest/tests/zip';
};

export type GetAllUsersLatestConfigTestsZipResponses = {
    /**
     * OK
     */
    200: string;
};

export type GetAllUsersLatestConfigTestsZipResponse = GetAllUsersLatestConfigTestsZipResponses[keyof GetAllUsersLatestConfigTestsZipResponses];

export type GetAllUsersLatestConfigFormsZipData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/results/user/all/latest/forms/zip';
};

export type GetAllUsersLatestConfigFormsZipResponses = {
    /**
     * OK
     */
    200: string;
};

export type GetAllUsersLatestConfigFormsZipResponse = GetAllUsersLatestConfigFormsZipResponses[keyof GetAllUsersLatestConfigFormsZipResponses];

export type GetGroupTestResultsZipData = {
    body?: never;
    path: {
        groupId: number;
    };
    query?: never;
    url: '/api/results/group/{groupId}/tests';
};

export type GetGroupTestResultsZipResponses = {
    /**
     * OK
     */
    200: string;
};

export type GetGroupTestResultsZipResponse = GetGroupTestResultsZipResponses[keyof GetGroupTestResultsZipResponses];

export type GetGroupFormResultsZipData = {
    body?: never;
    path: {
        groupId: number;
    };
    query?: never;
    url: '/api/results/group/{groupId}/forms';
};

export type GetGroupFormResultsZipResponses = {
    /**
     * OK
     */
    200: string;
};

export type GetGroupFormResultsZipResponse = GetGroupFormResultsZipResponses[keyof GetGroupFormResultsZipResponses];

export type GetGroupFullResultsZipData = {
    body?: never;
    path: {
        groupId: number;
    };
    query?: never;
    url: '/api/results/group/{groupId}/all';
};

export type GetGroupFullResultsZipResponses = {
    /**
     * OK
     */
    200: string;
};

export type GetGroupFullResultsZipResponse = GetGroupFullResultsZipResponses[keyof GetGroupFullResultsZipResponses];

export type GetLastestConfigData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/config/latest';
};

export type GetLastestConfigResponses = {
    /**
     * OK
     */
    200: Config;
};

export type GetLastestConfigResponse = GetLastestConfigResponses[keyof GetLastestConfigResponses];
