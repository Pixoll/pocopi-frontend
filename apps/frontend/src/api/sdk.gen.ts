// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { CreateUserData, CreateUserResponses, CreateUserErrors, UploadImageData, UploadImageResponses, SubmitFormAnswersData, SubmitFormAnswersResponses, UpdateLastestConfigData, UpdateLastestConfigResponses, GetUserData, GetUserResponses, GetAllUsersData, GetAllUsersResponses, GetAllTimeLogsData, GetAllTimeLogsResponses, GetUserTimelogsData, GetUserTimelogsResponses, GetAllUserSummariesData, GetAllUserSummariesResponses, GetUserSummaryByIdData, GetUserSummaryByIdResponses, GetUserTestResultsData, GetUserTestResultsResponses, GetGroupTestResultsZipData, GetGroupTestResultsZipResponses, GetUserFormResultsData, GetUserFormResultsResponses, GetGroupFormResultsAsZipData, GetGroupFormResultsAsZipResponses, GetLastestConfigData, GetLastestConfigResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Create new user
 * Creates a new user and returns success message
 */
export const createUser = <ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserResponses, CreateUserErrors, ThrowOnError>({
        url: '/api/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const uploadImage = <ThrowOnError extends boolean = false>(options: Options<UploadImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadImageResponses, unknown, ThrowOnError>({
        url: '/api/images',
        ...options
    });
};

export const submitFormAnswers = <ThrowOnError extends boolean = false>(options: Options<SubmitFormAnswersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubmitFormAnswersResponses, unknown, ThrowOnError>({
        url: '/api/forms/answer',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const updateLastestConfig = <ThrowOnError extends boolean = false>(options: Options<UpdateLastestConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateLastestConfigResponses, unknown, ThrowOnError>({
        url: '/api/config',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getUser = <ThrowOnError extends boolean = false>(options: Options<GetUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserResponses, unknown, ThrowOnError>({
        url: '/api/users/{username}',
        ...options
    });
};

export const getAllUsers = <ThrowOnError extends boolean = false>(options?: Options<GetAllUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllUsersResponses, unknown, ThrowOnError>({
        url: '/api/users/all',
        ...options
    });
};

export const getAllTimeLogs = <ThrowOnError extends boolean = false>(options?: Options<GetAllTimeLogsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllTimeLogsResponses, unknown, ThrowOnError>({
        url: '/api/timelogs',
        ...options
    });
};

export const getUserTimelogs = <ThrowOnError extends boolean = false>(options: Options<GetUserTimelogsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserTimelogsResponses, unknown, ThrowOnError>({
        url: '/api/timelogs/{userId}',
        ...options
    });
};

export const getAllUserSummaries = <ThrowOnError extends boolean = false>(options?: Options<GetAllUserSummariesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllUserSummariesResponses, unknown, ThrowOnError>({
        url: '/api/summary',
        ...options
    });
};

export const getUserSummaryById = <ThrowOnError extends boolean = false>(options: Options<GetUserSummaryByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserSummaryByIdResponses, unknown, ThrowOnError>({
        url: '/api/summary/{userId}',
        ...options
    });
};

export const getUserTestResults = <ThrowOnError extends boolean = false>(options: Options<GetUserTestResultsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserTestResultsResponses, unknown, ThrowOnError>({
        url: '/api/results/test/user/{userId}',
        ...options
    });
};

export const getGroupTestResultsZip = <ThrowOnError extends boolean = false>(options: Options<GetGroupTestResultsZipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetGroupTestResultsZipResponses, unknown, ThrowOnError>({
        url: '/api/results/test/group/{groupId}/zip',
        ...options
    });
};

export const getUserFormResults = <ThrowOnError extends boolean = false>(options: Options<GetUserFormResultsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserFormResultsResponses, unknown, ThrowOnError>({
        url: '/api/form-results/user/{userId}',
        ...options
    });
};

export const getGroupFormResultsAsZip = <ThrowOnError extends boolean = false>(options: Options<GetGroupFormResultsAsZipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetGroupFormResultsAsZipResponses, unknown, ThrowOnError>({
        url: '/api/form-results/group/{groupId}',
        ...options
    });
};

export const getLastestConfig = <ThrowOnError extends boolean = false>(options?: Options<GetLastestConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLastestConfigResponses, unknown, ThrowOnError>({
        url: '/api/config/latest',
        ...options
    });
};